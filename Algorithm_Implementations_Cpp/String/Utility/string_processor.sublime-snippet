<snippet>
	<content><![CDATA[
// Type 0: lower case, 1: upper case, 2: lower and upper case
template<int Type> int character_converter(int c){
	if(Type == 0) return c - 'a';
	else if(Type == 1) return c - 'A';
	else return islower(c) ? c - 'a' : c - 'A' + 26;
}
template<int Type> int inverse_character_converter(int x){
	if(Type == 0) return x + 'a';
	else if(Type == 1) return x + 'A';
	else return x < 26 ? x + 'a' : x - 26 + 'A';
}
template<int Type> istream &read_string(istream &in){ return in; }
template<int Type, class Head, class... Tail>
istream &read_string(istream &in, Head &H, Tail &...T){
	string temp;
	in >> temp;
	H.resize((int)temp.size());
	for(auto i = 0; i < (int)temp.size(); ++ i) H[i] = character_converter<Type>(temp[i]);
	return read_string<Type>(in, T...);
}
template<int Type> ostream &print_string(ostream &out){ return out; }
template<int Type, class Head, class... Tail>
ostream &print_string(ostream &out, const Head &H, const Tail &...T){
	string temp((int)H.size(), '?');
	for(auto i = 0; i < (int)H.size(); ++ i) temp[i] = inverse_character_converter<Type>(H[i]);
	return print_string<Type>(out << temp << " ", T...);
}
template<class Char_Type>
vector<Char_Type> &append(vector<Char_Type> &s){
	return s;
}
template<class Char_Type, class Head, class... Tail>
vector<Char_Type> &append(vector<Char_Type> &s, const Head &H, const Tail &... T){
	if constexpr(is_same<Char_Type, Head>::value) s.push_back(H);
	else s.insert(s.end(), H.begin(), H.end());
	return append(s, T...);
}
template<class Char_Or_String_Type>
Char_Or_String_Type concat(Char_Or_String_Type s){
	return s;
}
template<class Char_Type, class... Tail>
vector<Char_Type> concat(const vector<Char_Type> &s, const Tail &... T){
	vector<Char_Type> res = s;
	return append(res, T...);
}
template<class Char_Type, class... Tail>
Char_Type concat(Char_Type s, const Tail &... T){
	vector<Char_Type> res{s};
	return append(res, T...);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>string_processor</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
